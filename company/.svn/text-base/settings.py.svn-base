#coding:utf-8
import os

DEBUG = True
TEMPLATE_DEBUG = DEBUG

IS_BAE_ENV = False
WEB_DOMAIN = 'http://localhost:8000'
UPLOAD_LOCATION = '/static/upload/'
if 'SERVER_SOFTWARE' in os.environ:
    IS_BAE_ENV = True
    WEB_DOMAIN = 'http://yihaomen.duapp.com'
    UPLOAD_LOCATION = 'http://bcs.duapp.com/yihaomen/upload/'
    
BAE_BUCKET = 'yihaomen'
BAE_UPLOAD = '/upload/'

#是否记录日志启动logging
LOGGING = False
#管理员邮箱
ADMIN_EMAIL = 'summer@yihaomen.com'

ADMINS = (
    # ('Your Name', 'your_email@example.com'),
)

SESSION_EXPIRE_AT_BROWSER_CLOSE = True

WEB_NAME ='百纳通软件-POS,ERP,进销存,workflow,HR,DRP 业务开发平台'

SYSCATEGORY={"news":"news","weblog":"weblog","socity":"socity","picsay":"picsay"}

#====管理端pagesize 设定===================
ARTICLE_PAGE_SIZE=20
PHOTO_PAGE_SIZE=18
#====前端 pagesize 设定====================
FRONT_ARTICLE_PAGE_SIZE=15
FRONT_PHOTO_PAGE_SIZE=20
FRONT_JOKE_PAGE_SIZE=15

MANAGERS = ADMINS

MYNET_PAGE_SIZE=15
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

if 'SERVER_SOFTWARE' in os.environ:
    from bae.core import const
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql', 
            'NAME': 'AFBPjvWjhFKuYHNIXSPk',
            'USER': const.MYSQL_USER, 
            'PASSWORD': const.MYSQL_PASS,  
            'HOST': const.MYSQL_HOST,   
            'PORT': const.MYSQL_PORT, 
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql', 
            'NAME': 'company', 
            'USER': 'root',
            'PASSWORD': 'password',    
            'HOST': 'localhost',                   
            'PORT': '3308',                      
        }
    }

SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# On Unix systems, a value of None will cause Django to use the same
# timezone as the operating system.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'America/Chicago'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = False

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale.
USE_L10N = True

# If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = True

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = os.path.join(os.path.dirname(__file__),'static/upload/').replace('\\','/')

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = ''

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = os.path.join(os.path.dirname(__file__),'static')

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    ('css',os.path.join(STATIC_ROOT,'css').replace('\\','/') ),  
    ('js',os.path.join(STATIC_ROOT,'js').replace('\\','/') ), 
    ('img',os.path.join(STATIC_ROOT,'img').replace('\\','/') ),  
    ('flash',os.path.join(STATIC_ROOT,'flash').replace('\\','/') ),  
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = '$wolr$3ceq2$h%lcth&amp;xgmg@j*2wwcll+x_&amp;l4c!25h+*sibdk'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
#     'django.template.loaders.eggs.Loader',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # Uncomment the next line for simple clickjacking protection:
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
)


ROOT_URLCONF = 'company.urls'


# Python dotted path to the WSGI application used by Django's runserver.
# WSGI_APPLICATION = 'yihaomen.wsgi.application'

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(os.path.dirname(__file__), 'templates').replace('\\','/'),
)

TEMPLATE_CONTEXT_PROCESSORS=(
"django.core.context_processors.request",
"django.contrib.auth.context_processors.auth",
)

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles', 
    'company',
    'app',
    
      
    # Uncomment the next line to enable the admin:
    'django.contrib.admin',
    # Uncomment the next line to enable admin documentation:
    # 'django.contrib.admindocs',
)

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}
